-- @Ziggy Collapsible Fly+ESP Menu (camera-based flight, keeps draggable menu)
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UIS = game:GetService("UserInputService")
local Workspace = game:GetService("Workspace")

local player = Players.LocalPlayer
local char = player.Character or player.CharacterAdded:Wait()
local hrp = char:WaitForChild("HumanoidRootPart")
local humanoid = char:WaitForChild("Humanoid")

-- Settings
local flying = false
local flySpeed = 50 -- tweak this to taste
local espEnabled = false
local espColor = Color3.fromRGB(0,255,0)
local highlights = {}

-- ✅ Prevent duplicate GUI
if player:FindFirstChild("PlayerGui"):FindFirstChild("ZiggyMenu") then
    player.PlayerGui.ZiggyMenu:Destroy()
end

-- GUI (keeps your drag exactly the same)
local gui = Instance.new("ScreenGui")
gui.Name = "ZiggyMenu"
gui.ResetOnSpawn = false
gui.Parent = player:WaitForChild("PlayerGui")

local frame = Instance.new("Frame")
frame.Size = UDim2.new(0, 150, 0, 30) -- collapsed
frame.Position = UDim2.new(0.5, -75, 0.5, -15)
frame.BackgroundColor3 = Color3.fromRGB(20,20,20)
frame.BorderSizePixel = 0
frame.Active = true
frame.Draggable = true   -- <<< kept exactly as you wanted
frame.Parent = gui

-- Title / watermark
local title = Instance.new("TextLabel")
title.Size = UDim2.new(1,0,0,30)
title.Position = UDim2.new(0,0,0,0)
title.BackgroundTransparency = 1
title.Text = "Mod Menu ▼"
title.TextColor3 = Color3.fromRGB(255,255,255)
title.Font = Enum.Font.SourceSansBold
title.TextScaled = true
title.Parent = frame

local watermark = Instance.new("TextLabel")
watermark.Size = UDim2.new(1,0,0,15)
watermark.Position = UDim2.new(0,0,1,0)
watermark.BackgroundTransparency = 1
watermark.Text = "@Ziggy"
watermark.TextColor3 = Color3.fromRGB(150,150,150)
watermark.Font = Enum.Font.SourceSansItalic
watermark.TextScaled = true
watermark.Parent = frame

local expanded = false

-- Collapsible content
local content = Instance.new("Frame")
content.Size = UDim2.new(1,0,0,50)
content.Position = UDim2.new(0,0,0,30)
content.BackgroundTransparency = 1
content.Visible = false
content.Parent = frame

-- expand / collapse (keeps your behavior)
title.InputBegan:Connect(function(input)
    if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
        expanded = not expanded
        content.Visible = expanded
        frame.Size = expanded and UDim2.new(0,150,0,80) or UDim2.new(0,150,0,30)
        title.Text = expanded and "Mod Menu ▲" or "Mod Menu ▼"
    end
end)

-- checkbox helper: square box + checkmark ✔
local function createCheckbox(text, yPos, callback)
    local holder = Instance.new("Frame")
    holder.Size = UDim2.new(1,0,0,20)
    holder.Position = UDim2.new(0,0,0,yPos)
    holder.BackgroundTransparency = 1
    holder.Parent = content

    local box = Instance.new("TextButton")
    box.Name = "Box"
    box.Size = UDim2.new(0,18,0,18)
    box.Position = UDim2.new(0,6,0,1)
    box.BackgroundColor3 = Color3.fromRGB(60,60,60)
    box.BorderSizePixel = 0
    box.Text = ""
    box.AutoButtonColor = false
    box.Parent = holder

    local check = Instance.new("TextLabel")
    check.Size = UDim2.new(1,0,1,0)
    check.Position = UDim2.new(0,0,0,0)
    check.BackgroundTransparency = 1
    check.Text = "✔"               -- actual checkmark
    check.TextColor3 = Color3.fromRGB(0,220,0)
    check.Visible = false
    check.Font = Enum.Font.SourceSansBold
    check.TextScaled = true
    check.Parent = box

    local label = Instance.new("TextLabel")
    label.Size = UDim2.new(1,-30,1,0)
    label.Position = UDim2.new(0,30,0,0)
    label.BackgroundTransparency = 1
    label.TextColor3 = Color3.fromRGB(255,255,255)
    label.Text = text
    label.Font = Enum.Font.SourceSans
    label.TextScaled = true
    label.TextXAlignment = Enum.TextXAlignment.Left
    label.Parent = holder

    local state = false
    box.MouseButton1Click:Connect(function()
        state = not state
        check.Visible = state
        callback(state)
    end)
    label.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            state = not state
            check.Visible = state
            callback(state)
        end
    end)
end

-- create checkboxes
createCheckbox("Fly", 0, function(val)
    flying = val
    -- do NOT change PlatformStand; keep animations natural and avoid autorotate
    if not val then
        if hrp then hrp.AssemblyLinearVelocity = Vector3.new(0,0,0) end
    end
end)

createCheckbox("ESP", 28, function(val)
    espEnabled = val
    if not val then
        for _,hl in pairs(highlights) do
            if hl and hl.Parent then hl:Destroy() end
        end
        highlights = {}
    end
end)

-- ESP helpers
local function addHighlightToChar(charModel)
    if not charModel or not charModel:IsA("Model") then return end
    if charModel:FindFirstChild("ESP_Highlight") then return end
    local hl = Instance.new("Highlight")
    hl.Name = "ESP_Highlight"
    hl.Adornee = charModel
    hl.Parent = charModel
    hl.FillTransparency = 1
    hl.OutlineColor = espColor
    hl.OutlineTransparency = 0
    return hl
end

Players.PlayerAdded:Connect(function(plr)
    plr.CharacterAdded:Connect(function(ch)
        if espEnabled and plr ~= player then
            highlights[plr] = addHighlightToChar(ch)
        end
    end)
end)

local function refreshESP()
    for _,plr in pairs(Players:GetPlayers()) do
        if plr ~= player then
            local ch = plr.Character
            if espEnabled then
                if ch and not highlights[plr] then
                    highlights[plr] = addHighlightToChar(ch)
                end
            else
                if highlights[plr] and highlights[plr].Parent then
                    highlights[plr]:Destroy()
                end
                highlights[plr] = nil
            end
        end
    end
end
RunService.RenderStepped:Connect(refreshESP)

-- FLY: camera-based
RunService.RenderStepped:Connect(function()
    if not flying then return end
    if not hrp or not humanoid then return end
    local cam = Workspace.CurrentCamera
    if not cam then return end

    local look = cam.CFrame.LookVector
    local right = cam.CFrame.RightVector
    local horizLook = Vector3.new(look.X, 0, look.Z)
    local forwardAxis = (horizLook.Magnitude > 0.001) and horizLook.Unit or Vector3.new(0,0,-1)
    local rightAxis = Vector3.new(right.X, 0, right.Z)
    rightAxis = (rightAxis.Magnitude > 0.001) and rightAxis.Unit or Vector3.new(1,0,0)

    local moveDir = humanoid.MoveDirection
    local forwardInput = moveDir:Dot(forwardAxis)
    local rightInput = moveDir:Dot(rightAxis)

    local desired = cam.CFrame.LookVector * forwardInput + cam.CFrame.RightVector * rightInput
    if UIS:IsKeyDown(Enum.KeyCode.LeftShift) then
        desired = desired - Vector3.new(0,1,0) * 1
    end

    local finalVel = desired * flySpeed
    hrp.AssemblyLinearVelocity = finalVel
end)

Players.PlayerRemoving:Connect(function(plr)
    if highlights[plr] then
        if highlights[plr].Parent then highlights[plr]:Destroy() end
        highlights[plr] = nil
    end
end)

player.CharacterAdded:Connect(function(c)
    char = c
    hrp = char:WaitForChild("HumanoidRootPart")
    humanoid = char:WaitForChild("Humanoid")
end)
